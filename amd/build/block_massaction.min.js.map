{"version":3,"sources":["../src/block_massaction.js"],"names":["define","$","corestr","init","data","drawCheckboxes","populateMenus","on","selectAllHandler","actionHandler","courseActivities","inputControl","jQueryIdentifier","moduleId","moduleKey","sectionId","sectionmodules","length","children","document","createElement","type","id","className","appendChild","dropMenus","menuId","menuItem","sectionnames","text","value","disabled","append","eventData","checkAll","checkNone","checkSome","currentTarget","val","prop","target","activities","activeTabId","courseFormat","courseformat","numberOfActivities","activeTab","textContent","activeSection","attr","split","actionTarget","action","is","push","confirmDelete","get_string","when","done","window","confirm","JSON","stringify","submit","nothingSelected","alertString","alert"],"mappings":"AACAA,OAAM,qCAAC,CAAC,QAAD,CAAW,UAAX,CAAD,CAAyB,SAASC,CAAT,CAAYC,CAAZ,CAAqB,CAEhD,MAAO,CACHC,IAAI,CAAE,cAASC,CAAT,CAAe,CA6BjB,KAAKA,IAAL,CAAYA,CAAZ,CAGA,KAAKC,cAAL,CAAoB,KAAKD,IAAzB,EAGA,KAAKE,aAAL,CAAmB,KAAKF,IAAxB,EAGAH,CAAC,CAAC,6BAAD,CAAD,CAAiCM,EAAjC,CAAoC,OAApC,CAA6C,KAAKH,IAAlD,CAAwD,KAAKI,gBAA7D,EACAP,CAAC,CAAC,8BAAD,CAAD,CAAkCM,EAAlC,CAAqC,QAArC,CAA+C,KAAKH,IAApD,CAA0D,KAAKI,gBAA/D,EACAP,CAAC,CAAC,8BAAD,CAAD,CAAkCM,EAAlC,CAAqC,OAArC,CAA8C,KAAKH,IAAnD,CAAyD,KAAKI,gBAA9D,EAEAP,CAAC,CAAC,2BAAD,CAAD,CAA+BM,EAA/B,CAAkC,OAAlC,CAA2C,KAAKH,IAAhD,CAAsD,KAAKK,aAA3D,EACAR,CAAC,CAAC,0BAAD,CAAD,CAA8BM,EAA9B,CAAiC,OAAjC,CAA0C,KAAKH,IAA/C,CAAqD,KAAKK,aAA1D,EAEAR,CAAC,CAAC,wBAAD,CAAD,CAA4BM,EAA5B,CAA+B,OAA/B,CAAwC,KAAKH,IAA7C,CAAmD,KAAKK,aAAxD,EACAR,CAAC,CAAC,wBAAD,CAAD,CAA4BM,EAA5B,CAA+B,OAA/B,CAAwC,KAAKH,IAA7C,CAAmD,KAAKK,aAAxD,EAEAR,CAAC,CAAC,0BAAD,CAAD,CAA8BM,EAA9B,CAAiC,OAAjC,CAA0C,KAAKH,IAA/C,CAAqD,KAAKK,aAA1D,EAEAR,CAAC,CAAC,wBAAD,CAAD,CAA4BM,EAA5B,CAA+B,QAA/B,CAAyC,KAAKH,IAA9C,CAAoD,KAAKK,aAAzD,EAEAR,CAAC,CAAC,yBAAD,CAAD,CAA6BM,EAA7B,CAAgC,QAAhC,CAA0C,KAAKH,IAA/C,CAAqD,KAAKK,aAA1D,CACH,CAtDE,CAuDHJ,cAAc,CAAE,wBAASD,CAAT,CAAe,IACvBM,CAAAA,CAAgB,CAAG,EADI,CAEvBC,CAAY,CAAG,EAFQ,CAGvBC,CAAgB,CAAG,EAHI,CAIvBC,CAAQ,CAAG,CAJY,CAKvBC,CAAS,CAAG,CALW,CAMvBC,CAAS,CAAG,CANW,CAS3B,IAAKA,CAAL,GAAkBX,CAAAA,CAAI,CAACY,cAAvB,CAAuC,CAKnC,GAAkB,IAAd,GAAAD,CAAS,EAAmD,CAAtC,GAAAd,CAAC,CAAC,YAAcc,CAAf,CAAD,CAA2BE,MAArD,CAAmE,CAK/DL,CAAgB,CAAGG,CAAS,mDAA5B,CACAL,CAAgB,CAAGT,CAAC,CAAC,YAAcW,CAAf,CAAD,CAAkCM,QAAlC,CAA2C,cAA3C,CAAnB,CAGA,GAAI,CAACR,CAAgB,CAACO,MAAtB,CAA8B,CAC1BP,CAAgB,CAAGT,CAAC,CAAC,YAAcW,CAAf,CAAD,CAAkCM,QAAlC,CAA2C,aAA3C,CACtB,CACD,IAAKJ,CAAL,GAAkBV,CAAAA,CAAI,CAACY,cAAL,CAAoBD,CAApB,CAAlB,CAAkD,CAC9CF,CAAQ,CAAGT,CAAI,CAACY,cAAL,CAAoBD,CAApB,EAA+BD,CAA/B,CAAX,CACAH,CAAY,CAAGQ,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAf,CACAT,CAAY,CAACU,IAAb,CAAoB,UAApB,CACAV,CAAY,CAACW,EAAb,CAAkB,oBAAsBT,CAAxC,CACAF,CAAY,CAACY,SAAb,CAAyB,qBAAzB,CAEAb,CAAgB,CAACI,CAAD,CAAhB,CAA4BU,WAA5B,CAAwCb,CAAxC,CACH,CACJ,CACJ,CACJ,CA5FE,CA6FHL,aAAa,CAAE,uBAASF,CAAT,CAAe,IACtBqB,CAAAA,CAAS,CAAG,CAAC,6BAAD,CACC,uBADD,CAEC,wBAFD,CADU,CAItBC,CAAM,CAAG,CAJa,CAKtBC,CAAQ,CAAG,EALW,CAMtBZ,CAAS,CAAG,CANU,CAS1B,IAAKA,CAAL,GAAkBX,CAAAA,CAAI,CAACwB,YAAvB,CAAqC,CACjC,IAAKF,CAAL,GAAeD,CAAAA,CAAf,CAA0B,CACtBE,CAAQ,CAAGR,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAX,CACAO,CAAQ,CAACE,IAAT,CAAgBzB,CAAI,CAACwB,YAAL,CAAkBb,CAAlB,CAAhB,CACAY,CAAQ,CAACG,KAAT,CAAiBf,CAAjB,CAMA,GAA0B,6BAAtB,GAAAU,CAAS,CAACC,CAAD,CAAb,CAAyD,CACrD,GAAKX,CAAS,GAAIX,CAAAA,CAAI,CAACY,cAAvB,CAAwC,CACpCW,CAAQ,CAACI,QAAT,GACH,CAFD,IAEO,CACHJ,CAAQ,CAACI,QAAT,GACH,CACJ,CAND,IAMO,CAEHJ,CAAQ,CAACI,QAAT,GACH,CAED9B,CAAC,CAAC,IAAMwB,CAAS,CAACC,CAAD,CAAhB,CAAD,CAA2BM,MAA3B,CAAkCL,CAAlC,CACH,CACJ,CACJ,CA9HE,CA+HHnB,gBAAgB,CAAE,0BAASyB,CAAT,CAAoB,IAE9BC,CAAAA,CAAQ,GAFsB,CAG9BC,CAAS,GAHqB,CAI9BC,CAAS,GAJqB,CAK9BrB,CAAS,CAAG,EALkB,CAM9BF,CAAQ,CAAG,EANmB,CAO9BC,CAAS,CAAG,EAPkB,CAgBlC,OAAQmB,CAAS,CAACI,aAAV,CAAwBf,EAAhC,EACI,IAAK,6BAAL,CACIc,CAAS,GAAT,CAGJ,IAAK,6BAAL,CACID,CAAS,GAAT,CAMAlC,CAAC,CAAC,gCAAD,CAAD,CAAoCqC,GAApC,CAAwC,OAAxC,EAGJ,IAAK,4BAAL,CACI,GAAI,CAACH,CAAL,CAAgB,CACZD,CAAQ,GAAR,CACAjC,CAAC,CAAC,gCAAD,CAAD,CAAoCqC,GAApC,CAAwC,MAAxC,CACH,CAGD,IAAKvB,CAAL,GAAkBkB,CAAAA,CAAS,CAAC7B,IAAV,CAAeY,cAAjC,CAAiD,CAC7C,IAAKF,CAAL,GAAkBmB,CAAAA,CAAS,CAAC7B,IAAV,CAAeY,cAAf,CAA8BD,CAA9B,CAAlB,CAA4D,CACxDF,CAAQ,CAAGoB,CAAS,CAAC7B,IAAV,CAAeY,cAAf,CAA8BD,CAA9B,EAAyCD,CAAzC,CAAX,CAMA,GAAgD,CAA5C,CAAAb,CAAC,CAAC,qBAAuBY,CAAxB,CAAD,CAAmCI,MAAvC,CAAmD,CAC/ChB,CAAC,CAAC,qBAAuBY,CAAxB,CAAD,CAAmC0B,IAAnC,CAAwC,SAAxC,CAAmDL,CAAnD,CACH,CACJ,CACJ,CAED,GAAI,KAAAE,CAAJ,CAAwB,CACpBrB,CAAS,CAAGkB,CAAS,CAACO,MAAV,CAAiBV,KAA7B,CAEA,IAAKhB,CAAL,GAAkBmB,CAAAA,CAAS,CAAC7B,IAAV,CAAeY,cAAf,CAA8BD,CAA9B,CAAlB,CAA4D,CACxDF,CAAQ,CAAGoB,CAAS,CAAC7B,IAAV,CAAeY,cAAf,CAA8BD,CAA9B,EAAyCD,CAAzC,CAAX,CAMA,GAAgD,CAA5C,CAAAb,CAAC,CAAC,qBAAuBY,CAAxB,CAAD,CAAmCI,MAAvC,CAAmD,CAC/ChB,CAAC,CAAC,qBAAuBY,CAAxB,CAAD,CAAmC0B,IAAnC,CAAwC,SAAxC,IACH,CACJ,CACJ,CAdD,IAcO,CAQHtC,CAAC,CAAC,8BAAD,CAAD,CAAkCqC,GAAlC,CAAsC,KAAtC,CACH,CACD,MA5DR,CA8DH,CA7ME,CA8MH7B,aAAa,CAAE,uBAASwB,CAAT,CAAoB,IAC3BQ,CAAAA,CAAU,GADiB,CAE3BC,CAAW,CAAG,CAFa,CAG3BC,CAAY,CAAGV,CAAS,CAAC7B,IAAV,CAAewC,YAHH,CAI3B/B,CAAQ,CAAG,EAJgB,CAK3BC,CAAS,CAAG,IALe,CAM3B+B,CAAkB,CAAG,CANM,CAO3B9B,CAAS,CAAGd,CAAC,CAAC,8BAAD,CAAD,CAAkCqC,GAAlC,EAPe,CAQ3BE,CAAM,CAAG,EARkB,CAmB/B,GAAqB,UAAjB,GAAAG,CAAJ,CAAiC,IACzBG,CAAAA,CAAS,CAAG7C,CAAC,CAAC,sCAAD,CADY,CAEzB8C,CAAW,CAAGD,CAAS,CAAC,CAAD,CAAT,CAAaC,WAFF,CAGzBC,CAAa,CAAG/C,CAAC,CAAC,kBAAoB8C,CAApB,CAAkC,IAAnC,CAAD,CAA0CE,IAA1C,CAA+C,IAA/C,CAHS,CAI7B,GAAID,CAAa,SAAjB,CAAiC,CAC7BD,CAAW,CAAGD,CAAS,CAAC,CAAD,CAAT,CAAaC,WAA3B,CACAC,CAAa,CAAG/C,CAAC,CAAC,kBAAoB8C,CAApB,CAAkC,IAAnC,CAAD,CAA0CE,IAA1C,CAA+C,IAA/C,CACnB,CACDD,CAAa,CAAGA,CAAa,CAACE,KAAd,CAAoB,GAApB,CAAhB,CACAR,CAAW,CAAGM,CAAa,CAAC,CAAD,CAC9B,CAED/C,CAAC,CAAC,oCAAD,CAAD,CAAwCqC,GAAxC,CAA4CvB,CAA5C,EA/B+B,GAkC3BoC,CAAAA,CAAY,CAAGlB,CAAS,CAACI,aAAV,CAAwBf,EAAxB,CAA2B4B,KAA3B,CAAiC,GAAjC,CAlCY,CAmC3BE,CAAM,CAAGD,CAAY,CAACA,CAAY,CAAClC,MAAb,CAAsB,CAAvB,CAnCM,CAqC/B,OAAQF,CAAR,EACI,IAAK,KAAL,CAGI,IAAKA,CAAL,GAAkBkB,CAAAA,CAAS,CAAC7B,IAAV,CAAeY,cAAjC,CAAiD,CAC7C,IAAKF,CAAL,GAAkBmB,CAAAA,CAAS,CAAC7B,IAAV,CAAeY,cAAf,CAA8BD,CAA9B,CAAlB,CAA4D,CACxDF,CAAQ,CAAGoB,CAAS,CAAC7B,IAAV,CAAeY,cAAf,CAA8BD,CAA9B,EAAyCD,CAAzC,CAAX,CAEA,GAAI,CAAmB,UAAjB,GAAA6B,CAAY,EAAmBD,CAAW,GAAK3B,CAAhD,EACiB,UAAjB,GAAA4B,CADD,GAE6C,CAA5C,CAAA1C,CAAC,CAAC,qBAAuBY,CAAxB,CAAD,CAAmCI,MAFpC,EAGChB,CAAC,CAAC,qBAAuBY,CAAxB,CAAD,CAAmCwC,EAAnC,CAAsC,UAAtC,CAHL,CAGwD,CAEpDZ,CAAU,CAACa,IAAX,CAAgBzC,CAAhB,CACH,CAND,IAMO,IAAkD,MAA9C,GAAAZ,CAAC,CAAC,gCAAD,CAAD,CAAoCqC,GAApC,IACiB,UAAjB,GAAAK,CADA,EAC+BD,CAAW,GAAK3B,CADnD,CAC8D,CACjE0B,CAAU,CAACa,IAAX,CAAgBzC,CAAhB,CACH,CACJ,CACJ,CACD,MAEJ,QAEI,IAAKC,CAAL,GAAkBmB,CAAAA,CAAS,CAAC7B,IAAV,CAAeY,cAAf,CAA8BD,CAA9B,CAAlB,CAA4D,CAQxDF,CAAQ,CAAGoB,CAAS,CAAC7B,IAAV,CAAeY,cAAf,CAA8BD,CAA9B,EAAyCD,CAAzC,CAAX,CAEA,GAAI,CAAmB,UAAjB,GAAA6B,CAAY,EAAmBD,CAAW,GAAK3B,CAAhD,EACiB,UAAjB,GAAA4B,CADD,GAE6C,CAA5C,CAAA1C,CAAC,CAAC,qBAAuBY,CAAxB,CAAD,CAAmCI,MAFpC,EAGChB,CAAC,CAAC,qBAAuBY,CAAxB,CAAD,CAAmCwC,EAAnC,CAAsC,UAAtC,CAHL,CAGwD,CAEpDZ,CAAU,CAACa,IAAX,CAAgBzC,CAAhB,CACH,CAND,IAMO,IAAqB,UAAjB,GAAA8B,CAAY,EAAmBD,CAAW,GAAK3B,CAAnD,CAA8D,CACjE0B,CAAU,CAACa,IAAX,CAAgBzC,CAAhB,CACH,CACJ,CA3CT,CA8CAgC,CAAkB,CAAGJ,CAAU,CAACxB,MAAhC,CAOA,OAAQmC,CAAR,EACI,IAAK,QAAL,CACI,GAAyB,CAArB,CAAAP,CAAJ,CAA4B,CACxB,GAAIU,CAAAA,CAAa,CAAGrD,CAAO,CAACsD,UAAR,CAAmB,cAAnB,CACmB,kBADnB,CAEmBX,CAFnB,CAApB,CAIA5C,CAAC,CAACwD,IAAF,CAAOF,CAAP,EAAsBG,IAAtB,CAA2B,SAASH,CAAT,CAAwB,CAC/C,GAAI,CAACI,MAAM,CAACC,OAAP,CAAeL,CAAf,CAAL,CAAoC,CAChC,QACH,CAFD,IAEO,CACH,QACH,CACJ,CAND,CAOH,CACD,MAEJ,IAAK,MAAL,CACA,IAAK,OAAL,CACIf,CAAM,CAAGvC,CAAC,CAAC,qBAAuBmD,CAAxB,CAAD,CAAiCd,GAAjC,EAAT,CACA,MApBR,CAuBArC,CAAC,CAAC,0BAAD,CAAD,CAA8BqC,GAA9B,CAAkCc,CAAlC,EACAnD,CAAC,CAAC,8BAAD,CAAD,CAAkCqC,GAAlC,CAAsCuB,IAAI,CAACC,SAAL,CAAerB,CAAf,CAAtC,EACAxC,CAAC,CAAC,0BAAD,CAAD,CAA8BqC,GAA9B,CAAkCE,CAAlC,EAEA,GAAyB,CAArB,CAAAK,CAAJ,CAA4B,CACxB5C,CAAC,CAAC,gCAAD,CAAD,CAAoC8D,MAApC,EACH,CAFD,IAEO,CACH,GAAIC,CAAAA,CAAe,CAAG9D,CAAO,CAACsD,UAAR,CAAmB,gBAAnB,CAAqC,kBAArC,CAAtB,CACAvD,CAAC,CAACwD,IAAF,CAAOO,CAAP,EAAwBN,IAAxB,CAA6B,SAASO,CAAT,CAAsB,CAC/CN,MAAM,CAACO,KAAP,CAAaD,CAAb,CACH,CAFD,CAGH,CACJ,CA3UE,CA6UV,CA/UK,CAAN","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/str'], function($, corestr) {\n\n    return {\n        init: function(data) {\n            /*\n             * We're importing a two-dimensional array of data, including section numbers and their\n             * module/activity ids, section numbers and their human-readable labels, and the course\n             * format. The array has this structure:\n             *\n             *  [\n             *   courseformat: \"topics\",\n             *   sectionmodules: {0: [\"1\", \"2\"], 1: [\"3\"], 2: [\"4\", \"5\", \"6\"], ...},\n             *   sectionnames: [\"Main\", \"Topic 1\", \"Topic 2\", \"Topic 3\", ...]\n             *  ]\n             *\n             * The \"sectionmodules\" array will only contain sections that have modules/activities.\n             * Any sections that do not have any modules/activities will not be present in this\n             * array. Having this information makes us much less dependent upon the DOM.\n             *\n             * The \"sectionnames\" array contains the labels for all sections in the course, without\n             * regard for whether those sections have modules/activities. This is primarily used to\n             * populate the three drop menus. This is not an explicitly associative array, but the\n             * section labels are added in the order in which they display on the screen.\n             *\n             * Moodle always numbers the sections from zero to N. It's only the module id numbers that\n             * will vary. In addition, the sections and their activities are always in the order in\n             * which they appear in the browser. This is true even if the third section/topic/week/etc\n             * is moved to be in, say, the second position; its id in these arrays will change from 2 to 1,\n             * while the other section/week/topic/etc id will change from 1 to 2. The code uses sectionId\n             * to refer to the section number (display order number) and should not be confused with the\n             * section's id in the database.\n             */\n            this.data = data;\n\n            // Draw the checkboxes next to the activities.\n            this.drawCheckboxes(this.data);\n\n            // Populate the drop menus.\n            this.populateMenus(this.data);\n\n            // Assign handlers.\n            $('#block-massaction-selectall').on('click', this.data, this.selectAllHandler);\n            $('#block-massaction-selectsome').on('change', this.data, this.selectAllHandler);\n            $('#block-massaction-selectnone').on('click', this.data, this.selectAllHandler);\n\n            $('#block-massaction-outdent').on('click', this.data, this.actionHandler);\n            $('#block-massaction-indent').on('click', this.data, this.actionHandler);\n\n            $('#block-massaction-hide').on('click', this.data, this.actionHandler);\n            $('#block-massaction-show').on('click', this.data, this.actionHandler);\n\n            $('#block-massaction-delete').on('click', this.data, this.actionHandler);\n\n            $('#block-massaction-move').on('change', this.data, this.actionHandler);\n\n            $('#block-massaction-clone').on('change', this.data, this.actionHandler);\n        },\n        drawCheckboxes: function(data) {\n            var courseActivities = '';\n            var inputControl = '';\n            var jQueryIdentifier = '';\n            var moduleId = 0;\n            var moduleKey = 0;\n            var sectionId = 0;\n\n            // Iterate through our sections and their activities, drawing checkboxes for each activity.\n            for (sectionId in data.sectionmodules) {\n                /*\n                 * Also check if the section exists in the DOM so we don't attempt to draw checkboxes\n                 * for activities that do not exist in the DOM.\n                 */\n                if (sectionId !== null && $('#section-' + sectionId).length !== 0) {\n                    /*\n                     * We need the spans that house the edit controls in order to append our checkboxes\n                     * to them later.\n                     */\n                    jQueryIdentifier = sectionId + ' ul.section li.activity ' + 'div.mod-indent-outer div';\n                    courseActivities = $('#section-' + jQueryIdentifier).children('span.actions');\n                    // v3.9 adapted patch from Matt Davidson.\n                    // @link https://github.com/Syxton/moodle-block_massaction/commit/bd7343a9372e618fbdaa5e27abad76b9ebe534bd\n                    if (!courseActivities.length) {\n                        courseActivities = $('#section-' + jQueryIdentifier).children('div.actions');\n                    }\n                    for (moduleKey in data.sectionmodules[sectionId]) {\n                        moduleId = data.sectionmodules[sectionId][moduleKey];\n                        inputControl = document.createElement('input');\n                        inputControl.type = 'checkbox';\n                        inputControl.id = 'massaction-input-' + moduleId;\n                        inputControl.className = 'massaction-checkbox';\n\n                        courseActivities[moduleKey].appendChild(inputControl);\n                    }\n                }\n            }\n        },\n        populateMenus: function(data) {\n            var dropMenus = ['block-massaction-selectsome',\n                             'block-massaction-move',\n                             'block-massaction-clone'];\n            var menuId = 0;\n            var menuItem = '';\n            var sectionId = 0;\n\n            // This loop creates and appends all the options to the three drop menus.\n            for (sectionId in data.sectionnames) {\n                for (menuId in dropMenus) {\n                    menuItem = document.createElement('option');\n                    menuItem.text = data.sectionnames[sectionId];\n                    menuItem.value = sectionId;\n\n                    /*\n                     * We are disabling menu options in the \"Select all in section\" menu for\n                     * sections that do not currently have any modules available to select.\n                     */\n                    if (dropMenus[menuId] === 'block-massaction-selectsome') {\n                        if ((sectionId in data.sectionmodules)) {\n                            menuItem.disabled = false;\n                        } else {\n                            menuItem.disabled = true;\n                        }\n                    } else {\n                        // We aren't disabling any options in the other two menus.\n                        menuItem.disabled = false;\n                    }\n\n                    $('#' + dropMenus[menuId]).append(menuItem);\n                }\n            }\n        },\n        selectAllHandler: function(eventData) {\n            // Defaults. Assume we have a bad target and plan to do nothing.\n            var checkAll = false;\n            var checkNone = false;\n            var checkSome = false;\n            var sectionId = '';\n            var moduleId = '';\n            var moduleKey = '';\n\n            /*\n             * There is no default case in this switch because it is simply unnecessary. If\n             * the value of eventData.currentTarget.id has been hacked and does not match\n             * any of the three articulated cases, then we do not want to take any action, anyway.\n             * Since that is accomplished both with and without the default case, I have opted\n             * to omit the default case.\n             */\n            switch (eventData.currentTarget.id) {\n                case 'block-massaction-selectsome':\n                    checkSome = true;\n                    // Falls through.\n\n                case 'block-massaction-selectnone':\n                    checkNone = true;\n                    /*\n                     * They clicked \"Deselect all\" or \"Select all in section\", which means that if they\n                     * previously clicked \"Select all\", then they have over-ridden that choice.\n                     * Set this input's value to false to track that change.\n                     */\n                    $('#block-massaction-selected-all').val('false');\n                    // Falls through.\n\n                case 'block-massaction-selectall':\n                    if (!checkNone) {\n                        checkAll = true;\n                        $('#block-massaction-selected-all').val('true');\n                    }\n\n                    // Proceed to un|check all the boxes, as appropriate.\n                    for (sectionId in eventData.data.sectionmodules) {\n                        for (moduleKey in eventData.data.sectionmodules[sectionId]) {\n                            moduleId = eventData.data.sectionmodules[sectionId][moduleKey];\n\n                            /*\n                             * Make sure this module exists in the DOM. No point setting state\n                             * on a non-existent input.\n                             */\n                            if ($('#massaction-input-' + moduleId).length > 0) {\n                                $('#massaction-input-' + moduleId).prop('checked', checkAll);\n                            }\n                        }\n                    }\n\n                    if (checkSome === true) {\n                        sectionId = eventData.target.value;\n\n                        for (moduleKey in eventData.data.sectionmodules[sectionId]) {\n                            moduleId = eventData.data.sectionmodules[sectionId][moduleKey];\n\n                                /*\n                                 * Make sure this module exists in the DOM. No point setting state\n                                 * on a non-existent input.\n                                 */\n                            if ($('#massaction-input-' + moduleId).length > 0) {\n                                $('#massaction-input-' + moduleId).prop('checked', true);\n                            }\n                        }\n                    } else {\n                        /*\n                         * The user did not select all in a section. So we have to set this\n                         * menu's value back to 'all' in case they had previously made a menu\n                         * selection and are now clicking 'Select all' or 'Deselect all'.\n                         *\n                         * This is critical for correct operation of the block later!\n                         */\n                        $('#block-massaction-selectsome').val('all');\n                    }\n                    break;\n            }\n        },\n        actionHandler: function(eventData) {\n            var activities = new Array();\n            var activeTabId = 0;\n            var courseFormat = eventData.data.courseformat;\n            var moduleId = '';\n            var moduleKey = null;\n            var numberOfActivities = 0;\n            var sectionId = $('#block-massaction-selectsome').val();\n            var target = '';\n\n            /*\n             * When a course uses the OneTopic format and the user clicks 'Select all' or chooses\n             * an option from the \"Select all in section\" menu, then we will need to know which\n             * section was active. This enables us to determine whether they manually deselected\n             * any of the modules/activities displayed on the screen. We don't have to perform this\n             * check for any other section when the user has clicked 'Select all' because those\n             * sections' modules/activities are not present in the DOM and therefore could not be\n             * be manually deselected.\n             */\n            if (courseFormat === 'onetopic') {\n                var activeTab = $('.onetopic .nav-item .nav-link.active');\n                var textContent = activeTab[0].textContent;\n                var activeSection = $(\"li[aria-label='\" + textContent + \"']\").attr('id');\n                if (activeSection === undefined) {\n                    textContent = activeTab[1].textContent;\n                    activeSection = $(\"li[aria-label='\" + textContent + \"']\").attr('id');\n                }\n                activeSection = activeSection.split('-');\n                activeTabId = activeSection[1];\n            }\n\n            $('#block-massaction-selected-section').val(sectionId);\n\n            // Find out what the user wants to do.\n            var actionTarget = eventData.currentTarget.id.split('-');\n            var action = actionTarget[actionTarget.length - 1];\n\n            switch (sectionId) {\n                case 'all':\n                    // The user did not select all in a section. Instead, the user\n                    // either clicked 'Select All' or manually selected modules.\n                    for (sectionId in eventData.data.sectionmodules) {\n                        for (moduleKey in eventData.data.sectionmodules[sectionId]) {\n                            moduleId = eventData.data.sectionmodules[sectionId][moduleKey];\n\n                            if (((courseFormat === 'onetopic' && activeTabId === sectionId) ||\n                                 courseFormat !== 'onetopic') &&\n                                 $('#massaction-input-' + moduleId).length > 0 &&\n                                 $('#massaction-input-' + moduleId).is(':checked')) {\n\n                                activities.push(moduleId);\n                            } else if ($('#block-massaction-selected-all').val() === 'true' &&\n                                       courseFormat === 'onetopic' && activeTabId !== sectionId) {\n                                activities.push(moduleId);\n                            }\n                        }\n                    }\n                    break;\n\n                default:\n                    // They selected all in a section.\n                    for (moduleKey in eventData.data.sectionmodules[sectionId]) {\n                        /*\n                         * Ensure the activity is actually checked because it is possible they selected\n                         * all in a section, then changed their minds and manually deselected one or more.\n                         * Assuming they are all checked in the selected section would mean that, in such\n                         * a situation, the user would have to manually change ther selection in the drop\n                         * menu, as well.\n                         */\n                        moduleId = eventData.data.sectionmodules[sectionId][moduleKey];\n\n                        if (((courseFormat === 'onetopic' && activeTabId === sectionId) ||\n                             courseFormat !== 'onetopic') &&\n                             $('#massaction-input-' + moduleId).length > 0 &&\n                             $('#massaction-input-' + moduleId).is(':checked')) {\n\n                            activities.push(moduleId);\n                        } else if (courseFormat === 'onetopic' && activeTabId !== sectionId) {\n                            activities.push(moduleId);\n                        }\n                    }\n            }\n\n            numberOfActivities = activities.length;\n\n            /*\n             * The default case for this switch has been omitted because if the value of action\n             * is not one of the three enumerated in the switch, then there is nothing special\n             * we need to do.\n             */\n            switch (action) {\n                case 'delete':\n                    if (numberOfActivities > 0) {\n                        var confirmDelete = corestr.get_string('confirmation',\n                                                               'block_massaction',\n                                                               numberOfActivities);\n\n                        $.when(confirmDelete).done(function(confirmDelete) {\n                            if (!window.confirm(confirmDelete)) {\n                                return false;\n                            } else {\n                                return true;\n                            }\n                        });\n                    }\n                    break;\n\n                case 'move':\n                case 'clone':\n                    target = $('#block-massaction-' + action).val();\n                    break;\n            }\n\n            $('#block-massaction-action').val(action);\n            $('#block-massaction-activities').val(JSON.stringify(activities));\n            $('#block-massaction-target').val(target);\n\n            if (numberOfActivities > 0) {\n                $('#block-massaction-control-form').submit();\n            } else {\n                var nothingSelected = corestr.get_string('noitemselected', 'block_massaction');\n                $.when(nothingSelected).done(function(alertString) {\n                    window.alert(alertString);\n                });\n            }\n        }\n    };\n});\n/* jshint ignore:end */\n"],"file":"block_massaction.min.js"}